// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ports "github.com/jack-hughes/ports/pkg/apis/ports"
)

// MockPortClient is a mock of PortClient interface.
type MockPortClient struct {
	ctrl     *gomock.Controller
	recorder *MockPortClientMockRecorder
}

// MockPortClientMockRecorder is the mock recorder for MockPortClient.
type MockPortClientMockRecorder struct {
	mock *MockPortClient
}

// NewMockPortClient creates a new mock instance.
func NewMockPortClient(ctrl *gomock.Controller) *MockPortClient {
	mock := &MockPortClient{ctrl: ctrl}
	mock.recorder = &MockPortClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortClient) EXPECT() *MockPortClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockPortClient) CloseAndRecv() (*ports.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*ports.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockPortClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockPortClient)(nil).CloseAndRecv))
}

// Update mocks base method.
func (m *MockPortClient) Update(ctx context.Context, req *ports.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPortClientMockRecorder) Update(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortClient)(nil).Update), ctx, req)
}
