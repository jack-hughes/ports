// Code generated by MockGen. DO NOT EDIT.
// Source: ./stream.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/jack-hughes/ports/internal"
)

// MockStreamer is a mock of Streamer interface.
type MockStreamer struct {
	ctrl     *gomock.Controller
	recorder *MockStreamerMockRecorder
}

// MockStreamerMockRecorder is the mock recorder for MockStreamer.
type MockStreamerMockRecorder struct {
	mock *MockStreamer
}

// NewMockStreamer creates a new mock instance.
func NewMockStreamer(ctrl *gomock.Controller) *MockStreamer {
	mock := &MockStreamer{ctrl: ctrl}
	mock.recorder = &MockStreamerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamer) EXPECT() *MockStreamerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockStreamer) Start(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", path)
}

// Start indicates an expected call of Start.
func (mr *MockStreamerMockRecorder) Start(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStreamer)(nil).Start), path)
}

// Watch mocks base method.
func (m *MockStreamer) Watch() <-chan types.PortStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch")
	ret0, _ := ret[0].(<-chan types.PortStream)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockStreamerMockRecorder) Watch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStreamer)(nil).Watch))
}
